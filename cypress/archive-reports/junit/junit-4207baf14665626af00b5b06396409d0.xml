<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="368.7810" tests="6" failures="5">
  <testsuite name="Root Suite" timestamp="2022-05-23T06:58:40" tests="0" file="cypress/integration/featuretest_editexistingtaxreturnform/021_editTaxReturn_IForm.spec.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Edit Tax Return - IForm" timestamp="2022-05-23T06:58:40" tests="6" time="368.7610" failures="5">
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Income - Salary and Gross Interest" time="0.0000" classname="Edit Tax Return - IForm - Income - Salary and Gross Interest">
      <failure message="The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.clear()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.clear()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at $Cy.cy.<computed> [as log] (https://htcqa.sagehandisoft.com.au/__cypress/runner/cypress_runner.js:178159:72)
From Your Spec Code:
    at CommonFunctions.editTaxReturn_IForm_Income_SalaryOrWages (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:19627:69)
    at Context.eval (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:17757:21)]]></failure>
    </testcase>
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Income - Super Lump Sum" time="0.0000" classname="Edit Tax Return - IForm - Income - Super Lump Sum">
      <failure message="Timed out retrying after 90000ms: Expected to find element: `input[value=Yes]`, but never found it." type="AssertionError"><![CDATA[AssertionError: Timed out retrying after 90000ms: Expected to find element: `input[value=Yes]`, but never found it.
    at CommonFunctions.editTaxReturn_IForm_Income_SuperLumpSumSchedule (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:19746:8)
    at Context.eval (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:17777:21)]]></failure>
    </testcase>
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Deduction" time="0.0000" classname="Edit Tax Return - IForm - Deduction">
      <failure message="The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.wait()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.wait()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at $Cy.cy.<computed> [as log] (https://htcqa.sagehandisoft.com.au/__cypress/runner/cypress_runner.js:178159:72)
From Your Spec Code:
    at CommonFunctions.editTaxReturn_IForm_Deduction_WorkRelatedCarExpense (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:20135:12)
    at Context.eval (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:17791:21)]]></failure>
    </testcase>
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Tax Offset, Medicare and Adjustment" time="0.0000" classname="Edit Tax Return - IForm - Tax Offset, Medicare and Adjustment">
      <failure message="The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.wait()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.wait()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at $Cy.cy.<computed> [as log] (https://htcqa.sagehandisoft.com.au/__cypress/runner/cypress_runner.js:178159:72)
From Your Spec Code:
    at CommonFunctions.editTaxReturn_IForm_MedicareLevyRelatedItems (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:20316:10)
    at Context.eval (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:17807:21)]]></failure>
    </testcase>
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Income Tests and Spouse Details" time="0.0000" classname="Edit Tax Return - IForm - Income Tests and Spouse Details">
      <failure message="The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.wait()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress. It was caused by an unhandled promise rejection.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.wait()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at $Cy.cy.<computed> [as log] (https://htcqa.sagehandisoft.com.au/__cypress/runner/cypress_runner.js:178159:72)
From Your Spec Code:
    at CommonFunctions.editTaxReturn_IForm_IncomeTestsAndSpouseDetails (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:20454:10)
    at Context.eval (https://htcqa.sagehandisoft.com.au/__cypress/tests?p=cypress\integration\featuretest_editexistingtaxreturnform\021_editTaxReturn_IForm.spec.js:17823:21)]]></failure>
    </testcase>
    <testcase name="Edit Tax Return - IForm Edit Tax Return - IForm - Download and Validate Prefill Report" time="34.6350" classname="Edit Tax Return - IForm - Download and Validate Prefill Report">
    </testcase>
  </testsuite>
</testsuites>